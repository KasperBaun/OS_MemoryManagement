/* Frees a block of memory previously allocated by mymalloc. */
void myfree(void* block)
{
	memoryList *trav = head;
	while(trav != NULL){
		// We found the block in our memoryList
		if(trav->ptr == block){
			
			// Checking for free adjacent blocks
			
			// Free adjacent blocks on both sides of trav
			if(trav->last != NULL && trav->last->alloc == 0 && trav->next != NULL && trav->next->alloc == 0){
				trav->last->alloc = 0;
				trav->last->size = trav->last->size+trav->size+trav->next->size;
				trav->last->next = trav->next->next;
				trav->next->next->last = trav->last;
				memoryList *temp = trav;
				trav = trav->last;
				free(temp->next);
				free(temp);
				break;
			}
			
			
			if(trav->last != NULL && trav->last->alloc == 0){
				//Block left of trav is not allocated - update size first then pointers, then free trav
				memoryList *temp = trav;
				trav = trav->last;
				trav->size = trav->size+trav->next->size;
				trav->next = trav->next->next;
				trav->next->next->last = trav;
				free(temp);

			
			}
			if(trav->next != NULL && trav->next->alloc == 0){
				//Block right of trav is not allocated
				trav->alloc = 0;
				trav->size = trav->size + trav->next->size;
				memoryList *temp = trav->next;
				if(trav->next->next!=NULL){
					trav->next->next->last = trav;
				}
				trav->next = trav->next->next;
				//println("Line 193 - Trav->next: %p \n",trav->next);
				free(temp);
			}
			
			//No free adjacent blocks
			trav->alloc = 0;
		}
		trav = trav->next;
	}

}
