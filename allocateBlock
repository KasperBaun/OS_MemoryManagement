// Checking if trav(current block)==head
				if (suitableBlock->last == NULL && suitableBlock->size > requested)
				{	// Create new node with size = requested and append the remaining free memory to this block
					memoryList *new = malloc(sizeof(memoryList));
					new->size = suitableBlock->size - requested;
					new->alloc = 0;
					new->last = suitableBlock;
					if(suitableBlock->next==NULL){
						new->next=NULL;
					} else	new->next = suitableBlock->next;
					new->ptr = suitableBlock->ptr+requested;

					suitableBlock->alloc = 1;
					suitableBlock->size = requested;
					suitableBlock->next = new;
					return suitableBlock->ptr;
				}
				// Checking if trav(current block)==tail
				if(suitableBlock->next == NULL){
					if(suitableBlock->size == requested){
						suitableBlock->alloc = 1;
						return suitableBlock->ptr;
					}
					
					// Create new node with size = requested and append it to tail->last and update pointers to tail
					memoryList *new = malloc(sizeof(memoryList));
					new->size = suitableBlock->size-requested;
					new->alloc = 0;
					new->next = NULL;
					new->ptr = suitableBlock->ptr+requested;
					new->last = suitableBlock;

					suitableBlock->alloc = 1;
					suitableBlock->size = requested;
					suitableBlock->next = new;
					return suitableBlock->ptr;
				}

				// We found a free block in the middle of list - update ptr's accordingly
				if(suitableBlock->next != NULL && suitableBlock->last != NULL){
					
					// If the block is a perfect fit - we cant create a new block with free space next to it
					if(suitableBlock->size == requested){
					suitableBlock->alloc = 1;
					return suitableBlock->ptr;
					} 
										
					// Block->size is larger than requested so we need to create an adjacent new block with the remaining free space
					memoryList *new = malloc(sizeof(memoryList));
					new->size = suitableBlock->size-requested;
					new->alloc = 0;
					new->ptr = suitableBlock->ptr+requested;
					new->next = suitableBlock->next;
					new->last = suitableBlock;

					suitableBlock->alloc = 1;
					suitableBlock->size = requested;
					suitableBlock->next = new;
					return suitableBlock->ptr;						
				}